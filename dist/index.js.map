{"version":3,"sources":["webpack:///webpack/bootstrap 2d8c05f00c6fd9624e4b","webpack:///./src/constants.ts","webpack:///external \"await-to-js\"","webpack:///external \"os\"","webpack:///external \"axios\"","webpack:///external \"child_process\"","webpack:///external \"ramda\"","webpack:///./src/libs/rpc/index.ts","webpack:///external \"fs\"","webpack:///./src/web-services/index.ts","webpack:///./src/index.ts","webpack:///external \"path\"","webpack:///./src/wallet/index.ts","webpack:///./src/helpers/closeElectraDaemons.ts","webpack:///./src/libs/error/index.ts","webpack:///./src/libs/error/constants.ts","webpack:///./src/libs/rpc/constants.ts","webpack:///external \"tree-kill\"","webpack:///./src/helpers/getMaxItemFromList.ts","webpack:///./src/helpers/injectElectraConfig.ts","webpack:///./src/helpers/isPortAvailable.ts","webpack:///external \"net\"","webpack:///./src/helpers/tryCatch.ts","webpack:///./src/helpers/wait.ts","webpack:///./src/libs/crypto/index.ts","webpack:///external \"bip38\"","webpack:///external \"wif\"","webpack:///./src/libs/electra/index.ts","webpack:///external \"bip39\"","webpack:///external \"bitcoinjs-lib\"","webpack:///./src/web-services/getBalanceFor.ts","webpack:///./src/web-services/getCurrentPriceIn.ts","webpack:///./src/helpers/enumStringArray.ts","webpack:///./src/wallet/types.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2d8c05f00c6fd9624e4b","import * as bitcoinJs from 'bitcoinjs-lib'\n\nimport { DaemonConfig } from './types'\n\nlet binariesPath: string | undefined\nlet daemonUserDirPath: string | undefined\n\nif ((process as NodeJS.Process | undefined) !== undefined) {\n  // tslint:disable:no-require-imports no-var-requires typedef\n  const os = require('os')\n  const path = require('path')\n  // tslint:enable:no-require-imports no-var-requires typedef\n\n  binariesPath = path.resolve(__dirname, `../bin`)\n\n  switch (process.platform) {\n    case 'darwin':\n      daemonUserDirPath = path.resolve(os.homedir(), 'Library/Application Support/Electra')\n      break\n\n    case 'win32':\n      daemonUserDirPath = path.resolve(os.homedir(), 'AppData/Roaming/.Electra')\n      break\n\n    default:\n      daemonUserDirPath = path.resolve(os.homedir(), '.Electra')\n  }\n}\n\nexport const BINARIES_PATH: string | undefined = binariesPath\n\nexport const DAEMON_CONFIG: DaemonConfig = {\n  port: '5817',\n  rpcpassword: 'pass',\n  rpcport: '5788',\n  rpcuser: 'user'\n}\n\nexport const DAEMON_URI: string = `http://127.0.0.1:${DAEMON_CONFIG.rpcport}`\n\nexport const DAEMON_USER_DIR_PATH: string | undefined = daemonUserDirPath\n\nexport const ECA_NETWORK: bitcoinJs.Network = {\n  bip32: { public: 0, private: 0 },\n  messagePrefix: '\\u0018Electra very Signed Message:\\n', // TODO Not sure about that yet !\n  pubKeyHash: 33,\n  scriptHash: 0, // TODO Find this parameter\n  wif: 161 // WIF version\n}\n\nexport const ECA_TRANSACTION_FEE: number = 0.00001\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.ts","module.exports = require(\"await-to-js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"await-to-js\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"child_process\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"child_process\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"ramda\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ramda\"\n// module id = 5\n// module chunks = 0","// tslint:disable:no-null-keyword object-literal-sort-keys\n\nimport to from 'await-to-js'\nimport Axios, { AxiosRequestConfig } from 'axios'\n\nimport ElectraJsError from '../error'\nimport { ElectraJsErrorReference } from '../error/types'\nimport { RPC_ERRORS_TRANSLATION } from './constants'\nimport { JsonRpcRequest, JsonRpcResponse, RpcMethod, RpcMethodParams, RpcMethodResult } from './types'\n\nexport interface RpcAuth {\n  username: string\n  password: string\n}\n\nconst CONFIG_DEFAULT: AxiosRequestConfig = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}\n// tslint:disable-next-line:no-magic-numbers\nconst ONE_YEAR_IN_SECONDS: number = 60 * 60 * 24 * 365\n\n/**\n * RPC server related methods matching RPC commands.\n */\nexport default class Rpc {\n  /** Basic Authentication info for RPC calls. */\n  private readonly auth: RpcAuth\n  /** RPC server URI. */\n  private readonly uri: string\n\n  public constructor(uri: string, auth: RpcAuth) {\n    this.auth = auth\n    this.uri = uri\n  }\n\n  /**\n   * JSON-RCP query helper.\n   */\n  private async query<T extends RpcMethod>(method: T, params: RpcMethodParams): Promise<RpcMethodResult<T>> {\n    const rpcRequestDataFull: JsonRpcRequest<T> = { jsonrpc: '2.0', method, params }\n    const configFull: AxiosRequestConfig = { ...CONFIG_DEFAULT, ...{ auth: this.auth } }\n\n    const [err, res] = await to(Axios.post<JsonRpcResponse<T>>(this.uri, rpcRequestDataFull, configFull))\n\n    if (err !== null) {\n      if (\n        err.response !== undefined\n        && err.response.data !== undefined\n        && err.response.data.error !== undefined\n        && err.response.data.error !== null\n      ) {\n        const errorCode: string = String(err.response.data.error.code)\n        const errorKey: keyof ElectraJsErrorReference | undefined = RPC_ERRORS_TRANSLATION[errorCode]\n        if (errorKey !== undefined) {\n          throw new ElectraJsError(errorKey)\n        }\n\n        throw new Error(err.data.error.message)\n      }\n\n      throw new Error(err.message)\n    }\n\n    if (res === undefined || res.data === undefined) {\n      throw new Error(`We did't get the expected RPC response.`)\n    }\n\n    return res.data.result\n  }\n\n  /**\n   * Change the wallet passphrase from <oldPassphrase> to <newPassphrase>.\n   */\n  public async changePassphrase(\n    oldPassphrase: string,\n    newPassphrase: string\n  ): Promise<RpcMethodResult<'walletpassphrasechange'>> {\n    return this.query('walletpassphrasechange', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Check the wallet integrity.\n   */\n  public async check(): Promise<RpcMethodResult<'checkwallet'>> {\n    return this.query('checkwallet', null)\n  }\n\n  /**\n   * Encrypt the wallet with <passphrase>.\n   */\n  public async encryptWallet(passphrase: string): Promise<RpcMethodResult<'encryptwallet'>> {\n    return this.query('encryptwallet', [passphrase])\n  }\n\n  /**\n   * Get the account associated with the given address.\n   */\n  public async getAccount(address: string): Promise<RpcMethodResult<'getaccount'>> {\n    return this.query('getaccount', [address])\n  }\n\n  /**\n   * Get the total available balance.\n   */\n  public async getBalance(): Promise<RpcMethodResult<'getbalance'>> {\n    return this.query('getbalance', null)\n  }\n\n  /**\n   * Get connection count.\n   */\n  public async getConnectionCount(): Promise<RpcMethodResult<'getconnectioncount'>> {\n    return this.query('getconnectioncount', null)\n  }\n\n  /**\n   * Get the difficulty as a multiple of the minimum difficulty.\n   */\n  public async getDifficulty(): Promise<RpcMethodResult<'getdifficulty'>> {\n    return this.query('getdifficulty', null)\n  }\n\n  /**\n   * Get the current state info.\n   */\n  public async getInfo(): Promise<RpcMethodResult<'getinfo'>> {\n    return this.query('getinfo', null)\n  }\n\n  /**\n   * Get the local block height.\n   */\n  public async getLocalBlockHeight(): Promise<RpcMethodResult<'getblockcount'>> {\n    return this.query('getblockcount', null)\n  }\n\n  /**\n   * Generate a new address for receiving payments.\n   */\n  public async getNewAddress(account?: string): Promise<RpcMethodResult<'getnewaddress'>> {\n    return this.query('getnewaddress', account !== undefined ? [account] : null)\n  }\n\n  /**\n   * Get the peers info.\n   */\n  public async getPeersInfo(): Promise<RpcMethodResult<'getpeerinfo'>> {\n    return this.query('getpeerinfo', null)\n  }\n\n  /**\n   * Get the private key of <addressHash>.\n   */\n  public async getPrivateKey(addressHash: string): Promise<RpcMethodResult<'dumpprivkey'>> {\n    return this.query('dumpprivkey', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Get the current staking info.\n   */\n  public async getStakingInfo(): Promise<RpcMethodResult<'getstakinginfo'>> {\n    return this.query('getstakinginfo', null)\n  }\n\n  /**\n   * Get a transaction detailed info.\n   */\n  public async getTransaction(transactionHash: string): Promise<RpcMethodResult<'gettransaction'>> {\n    return this.query('gettransaction', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Import a new address private key.\n   */\n  public async importPrivateKey(privateKey: string): Promise<RpcMethodResult<'importprivkey'>> {\n    return this.query('importprivkey', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Lists groups of addresses which have had their common ownership made public\n   * by common use as inputs or as the resulting change in past transactions.\n   */\n  public async listAddressGroupings(): Promise<RpcMethodResult<'listaddressgroupings'>> {\n    return this.query('listaddressgroupings', null)\n  }\n\n  /**\n   * List receiving addresses data.\n   */\n  public async listReceivedByAddress(\n    minConfirmations: number = 1,\n    includeEmpty: boolean = false\n  ): Promise<RpcMethodResult<'listreceivedbyaddress'>> {\n    return this.query('listreceivedbyaddress', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * List transactions.\n   */\n  public async listTransactions(\n    account: string = '*',\n    count: number = 10,\n    from: number = 0\n  ): Promise<RpcMethodResult<'listtransactions'>> {\n    return this.query('listtransactions', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * List unspent transactions between <minConfirmations> and <maxConfirmations>,\n   * for the given list of <address> if specified.\n   */\n  public async listUnspent(\n    minConfirmations: number = 1,\n    maxConfirmations: number = 9999999,\n    ...address: string[]\n  ): Promise<RpcMethodResult<'listunspent'>> {\n    return this.query('listunspent', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Removes the wallet encryption key from memory, locking the wallet.\n   * After calling this method, you will need to call walletpassphrase again\n   * before being able to call any methods which require the wallet to be unlocked.\n   */\n  public async lock(): Promise<RpcMethodResult<'walletlock'>> {\n    return this.query('walletlock', null)\n  }\n\n  /**\n   * Make a public/private key pair.\n   * <prefix> is the optional preferred prefix for the public key.\n   */\n  public async makeKeyPair(prefix?: string): Promise<RpcMethodResult<'makekeypair'>> {\n    return this.query('makekeypair', prefix !== undefined ? [prefix] : null)\n  }\n\n  /**\n   * Create a basic transaction and broadcast it.\n   *\n   * @note\n   * THIS METHOD SHOULD NOT BE USED ONCE THE FIRST FINAL VERSION IS RELEASED.\n   * This transaction is \"basic\" because the unspent transaction are automatically selected.\n   */\n  public async sendBasicTransaction(toAddressHash: string, amount: number): Promise<RpcMethodResult<'sendtoaddress'>> {\n    return this.query('sendtoaddress', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Exit the daemon.\n   */\n  public async stop(): Promise<RpcMethodResult<'stop'>> {\n    return this.query('stop', null)\n  }\n\n  /**\n   * Stores the wallet decryption key in memory for <timeout> seconds.\n   * If [stakingOnly] is TRUE, sending functions are disabled.\n   */\n  public async unlock(\n    passphrase: string,\n    timeout: number = ONE_YEAR_IN_SECONDS,\n    stakingOnly: boolean = true\n  ): Promise<RpcMethodResult<'walletpassphrase'>> {\n    return this.query('walletpassphrase', [passphrase, timeout, stakingOnly])\n  }\n\n  /**\n   * Validate <address> and get its info.\n   */\n  public async validateAddress(address: string): Promise<RpcMethodResult<'validateaddress'>> {\n    return this.query('validateaddress', Array.prototype.slice.call(arguments))\n  }\n\n  /**\n   * Validate <publicKey> and get its info.\n   */\n  public async validatePublicKey(publicKey: string): Promise<RpcMethodResult<'validatepubkey'>> {\n    return this.query('validatepubkey', Array.prototype.slice.call(arguments))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/rpc/index.ts","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 7\n// module chunks = 0","import getBalanceFor from './getBalanceFor'\nimport getCurrentPriceIn, { CoinMarketCapCurrency } from './getCurrentPriceIn'\n\nexport { CoinMarketCapCurrency }\n\nexport interface WebServices {\n  getBalanceFor: typeof getBalanceFor\n  getCurrentPriceIn: typeof getCurrentPriceIn\n}\n\nexport default {\n  getBalanceFor,\n  getCurrentPriceIn\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/web-services/index.ts","import * as constants from './constants'\nimport Wallet from './wallet'\nimport webServices, { CoinMarketCapCurrency, WebServices } from './web-services'\n\nexport { CoinMarketCapCurrency }\n\nimport { Settings } from './types'\n\nconst SETTINGS_DEFAULT: Settings = {\n  isHard: false\n}\n\n/**\n * ElectraJs version.\n * DO NOT CHANGE THIS LINE SINCE THE VERSION IS AUTOMATICALLY INJECTED !\n */\nconst VERSION: string = '__ELECTRA-JS_VERSION__'\n\n/**\n * Main ElectraJS class.\n */\nexport default class ElectraJs {\n  /** Electra blockchain specific constants. */\n  public readonly constants: typeof constants = constants\n\n  /** Wallet management. */\n  public wallet: Wallet\n\n  /** Web services. */\n  public webServices: WebServices\n\n  public constructor(settings: Settings = {}) {\n    const { isHard } = { ...SETTINGS_DEFAULT, ...settings }\n\n    this.wallet = new Wallet(isHard)\n    this.webServices = webServices\n  }\n\n  /**\n   * Get the current version of ElectraJS.\n   */\n  public getVersion(): string {\n    return VERSION\n  }\n}\n\n// tslint:disable\n// For TypeScript\nmodule.exports = ElectraJs\nmodule.exports.default = module.exports\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 10\n// module chunks = 0","import to from 'await-to-js'\nimport { ChildProcess } from 'child_process'\nimport * as R from 'ramda'\n\nimport { BINARIES_PATH, DAEMON_CONFIG, DAEMON_URI, DAEMON_USER_DIR_PATH, ECA_TRANSACTION_FEE } from '../constants'\nimport closeElectraDaemons from '../helpers/closeElectraDaemons'\nimport getMaxItemFromList from '../helpers/getMaxItemFromList'\nimport injectElectraConfig from '../helpers/injectElectraConfig'\nimport isPortAvailable from '../helpers/isPortAvailable'\nimport tryCatch from '../helpers/tryCatch'\nimport wait from '../helpers/wait'\nimport Crypto from '../libs/crypto'\nimport Electra from '../libs/electra'\nimport Rpc from '../libs/rpc'\nimport webServices from '../web-services'\n\nimport { RpcMethodResult } from '../libs/rpc/types'\nimport { Address } from '../types'\nimport {\n  PlatformBinary,\n  WalletAddress,\n  WalletDaemonState,\n  WalletExchangeFormat,\n  WalletInfo,\n  WalletLockState,\n  WalletState,\n  WalletTransaction,\n  WalletTransactionType\n} from './types'\n\n// tslint:disable-next-line:no-magic-numbers\nconst ONE_YEAR_IN_SECONDS: number = 60 * 60 * 24 * 365\nconst PLATFORM_BINARY: PlatformBinary = {\n  darwin: 'electrad-macos',\n  linux: 'electrad-linux',\n  win32: 'electrad-windows.exe'\n}\nconst WALLET_INDEX: number = 0\n\n/**\n * Wallet management.\n */\nexport default class Wallet {\n  /** List of the wallet HD addresses. */\n  private ADDRESSES: WalletAddress[] = []\n  /** List of the wallet HD addresses. */\n  public get addresses(): WalletAddress[] {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #addresses are only available when the #state is \"READY\".`)\n    }\n\n    return this.ADDRESSES\n  }\n\n  /** List of the wallet non-HD (random) and HD addresses. */\n  public get allAddresses(): WalletAddress[] {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: #allAddresses are only available when the #state is \"READY\".`)\n    }\n\n    return [...this.addresses, ...this.randomAddresses]\n  }\n\n  /** Hard wallet daemon Node child process. */\n  private daemon: ChildProcess\n\n  /** Electra Daemon state. */\n  private DAEMON_STATE: WalletDaemonState\n  /** Electra Daemon state. */\n  public get daemonState(): WalletDaemonState {\n    if (!this.isHard) {\n      throw new Error(`ElectraJs.Wallet: #daemonState is only available when using the hard wallet.`)\n    }\n\n    return this.DAEMON_STATE\n  }\n\n  /** Is it a hard wallet (= using the daemon binary) ? */\n  private readonly isHard: boolean\n\n  /** Is it a brand new wallet (= no pre-existing \".Electra directory\") ? */\n  public isNew: boolean\n\n  /** Is this wallet locked ? */\n  private LOCK_STATE: WalletLockState | undefined\n  /**\n   * Is this wallet locked ?\n   * The wallet is considered as locked when all its addresses private keys are currently ciphered.\n   */\n  public get lockState(): WalletLockState {\n    if (this.LOCK_STATE === undefined && this.DAEMON_STATE !== WalletDaemonState.STARTED) {\n      throw new Error(`ElectraJs.Wallet: You need to #startDaemon in order to know the wallet #lockState.`)\n    }\n\n    return this.LOCK_STATE as WalletLockState\n  }\n\n  /**\n   * Wallet HD Master Node address.\n   *\n   * @note\n   * THIS ADDRESS MUST BE KEPT AN\tINACCESSIBLE PRIVATE PROPERTY !\n   * While revealing the Master Node address hash would not be a security risk, it still would be privacy risk.\n   * Indeed, \"guessing\" the children addresses from this address hash is really difficult, but NOT impossible.\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#security\n   */\n  private MASTER_NODE_ADDRESS: WalletAddress | undefined\n\n  /** Mnenonic. */\n  private MNEMONIC: string | undefined\n  /**\n   * Mnenonic.\n   *\n   * @note\n   * ONLY available when generating a brand new Wallet, which happens after calling #generate()\n   * with an undefined <mnemonic> parameter on a Wallet instance with an \"EMPTY\" #state.\n   */\n  public get mnemonic(): string {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet:\n        #mnemonic is only available after a brand new Wallet has been generated the #state is \"READY\".\n      `)\n    }\n\n    if (this.MNEMONIC === undefined) {\n      throw new Error(`ElectraJs.Wallet: #mnemonic is only available after a brand new Wallet has been generated.`)\n    }\n\n    return this.MNEMONIC\n  }\n\n  /** List of the wallet random (non-HD) addresses. */\n  private RANDOM_ADDRESSES: WalletAddress[] = []\n  /** List of the wallet random (non-HD) addresses. */\n  public get randomAddresses(): WalletAddress[] {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #randomAddresses are only available when the #state is \"READY\".`)\n    }\n\n    return this.RANDOM_ADDRESSES\n  }\n\n  /** RPC Server instance.  */\n  private readonly rpc: Rpc\n\n  /** Wallet state. */\n  private STATE: WalletState\n  /**\n   * Wallet state.\n   * This state can be one of:\n   * - EMPTY, when it has just been instanciated or reset ;\n   * - READY, when it has been generated, or seeded with random (non-HD) private keys imports.\n   */\n  public get state(): WalletState {\n    return this.STATE\n  }\n\n  public constructor(isHard: boolean = false) {\n    this.isHard = isHard\n    this.STATE = WalletState.EMPTY\n\n    if (isHard) {\n      this.rpc = new Rpc(DAEMON_URI, {\n        password: DAEMON_CONFIG.rpcpassword,\n        username: DAEMON_CONFIG.rpcuser\n      })\n\n      // tslint:disable-next-line:no-require-imports\n      this.isNew = !this.isDaemonUserDirectory()\n\n      this.DAEMON_STATE = WalletDaemonState.STOPPED\n\n      return\n    }\n\n    this.LOCK_STATE = WalletLockState.UNLOCKED\n  }\n\n  /**\n   * Start the hard wallet daemon.\n   */\n  public async startDaemon(): Promise<void> {\n    if (!this.isHard) {\n      throw new Error(`ElectraJs.Wallet: The #startDeamon() method can only be called on a hard wallet`)\n    }\n\n    if (this.DAEMON_STATE !== WalletDaemonState.STOPPED) {\n      throw new Error(`ElectraJs.Wallet:\n        The #startDeamon() method can only be called on an stopped wallet (#daemonState = \"STOPPED\").\n      `)\n    }\n\n    this.DAEMON_STATE = WalletDaemonState.STARTING\n\n    if (!await isPortAvailable(Number(DAEMON_CONFIG.port))) {\n      // Stop any existing Electra deamon process first\n      await closeElectraDaemons()\n    }\n\n    // Inject Electra.conf file if it doesn't already exist\n    const [err1] = tryCatch(injectElectraConfig)\n    if (err1 !== undefined) throw err1\n\n    const binaryPath: string = `${BINARIES_PATH}/${PLATFORM_BINARY[process.platform]}`\n\n    // Dirty hack to give enough permissions to the binary in order to be run\n    // TODO Run this command in the postinstall script ?\n    // tslint:disable-next-line:no-require-imports\n    require('child_process').execSync(`chmod 755 ${binaryPath}`)\n\n    // tslint:disable-next-line:no-require-imports\n    this.daemon = require('child_process').spawn(\n      binaryPath,\n      [\n      `--deamon=1`,\n      `--port=${DAEMON_CONFIG.port}`,\n      `--rpcuser=${DAEMON_CONFIG.rpcuser}`,\n      `--rpcpassword=${DAEMON_CONFIG.rpcpassword}`,\n      `--rpcport=${DAEMON_CONFIG.rpcport}`\n      ])\n\n    // TODO Add a debug mode in ElectraJs settings\n    this.daemon.stdout.setEncoding('utf8').on('data', console.log.bind(this))\n    this.daemon.stderr.setEncoding('utf8').on('data', console.log.bind(this))\n\n    this.daemon.on('close', (code: number) => {\n      this.DAEMON_STATE = WalletDaemonState.STOPPED\n\n      // tslint:disable-next-line:no-console\n      console.log(`The wallet daemon exited with the code: ${code}.`)\n    })\n\n    while (this.DAEMON_STATE === WalletDaemonState.STARTING) {\n      const [err2] = await to(this.rpc.getInfo())\n      if (err2 === null) {\n        this.LOCK_STATE = await this.getDaemonLockState()\n        this.DAEMON_STATE = WalletDaemonState.STARTED\n      }\n    }\n  }\n\n  /**\n   * Stop the hard wallet daemon.\n   */\n  public async stopDaemon(): Promise<void> {\n    if (!this.isHard) {\n      throw new Error(`ElectraJs.Wallet: The #stopDeamon() method can only be called on a hard wallet`)\n    }\n\n    this.DAEMON_STATE = WalletDaemonState.STOPPING\n\n    await closeElectraDaemons()\n\n    // Dirty hack since we have no idea how long the deamon process will take to be killed\n    while ((this.DAEMON_STATE as WalletDaemonState) !== WalletDaemonState.STOPPED) {\n      // tslint:disable-next-line:no-magic-numbers\n      await wait(250)\n    }\n  }\n\n  /**\n   * Generate an HD wallet from either the provided mnemonic seed, or a randomly generated one,\n   * including ‒ at least ‒ the first derived address.\n   *\n   * @note In case the [mnemonicExtension] is specified, it MUST be encoded in UTF-8 using NFKD.\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#wordlist\n   *\n   * TODO Figure out a way to validate provided mnemonics using different specs (words list & entropy strength).\n   */\n  public async generate(mnemonic?: string, mnemonicExtension?: string, chainsCount: number = 1): Promise<void> {\n    if (this.STATE !== WalletState.EMPTY) {\n      throw new Error(`ElectraJs.Wallet:\n        The #generate() method can only be called on an empty wallet (#state = \"EMPTY\").\n        You need to #reset() it first, then #initialize() it again in order to #generate() a new one.\n      `)\n    }\n\n    if (this.isHard && this.DAEMON_STATE !== WalletDaemonState.STARTED) {\n      throw new Error(`ElectraJs.Wallet:\n        The #generate() method can only be called on a started hard wallet (#daemon = \"STARTED\").\n        You need to #startDaemon() first.\n      `)\n    }\n\n    if (this.isHard && this.LOCK_STATE !== WalletLockState.UNLOCKED) {\n      throw new Error(`ElectraJs.Wallet:\n        The #generate() method can only be called once the hard wallet has been unlocked (#lockState = \"UNLOCKED\").\n        You need to #unlock() it first.\n      `)\n    }\n\n    /*\n      ----------------------------------\n      STEP 1: MNEMONIC\n    */\n\n    if (mnemonic !== undefined) {\n      if (!Electra.validateMnemonic(mnemonic)) {\n        throw new Error(`ElectraJs.Wallet: #generate() <mnemonic> parameter MUST be a valid mnemonic.`)\n      }\n    } else {\n      try {\n        // tslint:disable-next-line:no-parameter-reassignment\n        mnemonic = Electra.getRandomMnemonic()\n        this.MNEMONIC = mnemonic\n      }\n      catch (err) { throw err }\n    }\n\n    /*\n      ----------------------------------\n      STEP 2: MASTER NODE\n    */\n\n    try {\n      const address: Address = Electra.getMasterNodeAddressFromMnemonic(mnemonic, mnemonicExtension)\n      this.MASTER_NODE_ADDRESS = {\n        ...address,\n        label: null\n      }\n    }\n    catch (err) { throw err }\n\n    /*\n      ----------------------------------\n      STEP 3: CHAINS\n    */\n\n    let chainIndex: number = -1\n    try {\n      while (++chainIndex < chainsCount) {\n        const address: Address = Electra.getDerivedChainFromMasterNodePrivateKey(\n          this.MASTER_NODE_ADDRESS.privateKey,\n          WALLET_INDEX,\n          chainIndex\n        )\n\n        this.ADDRESSES.push({\n          ...address,\n          label: null\n        })\n      }\n    }\n    catch (err) { throw err }\n\n    /*\n      ----------------------------------\n      STEP 4: RPC SERVER\n    */\n\n    if (this.isHard) {\n      let i: number\n\n      // We try to export all the used addresses from the RPC daemon\n      const daemonAddresses: string[] = []\n      const [err, entries] = await to(this.rpc.listAddressGroupings())\n      if (err !== null || entries === undefined) throw err\n      // tslint:disable-next-line:typedef\n      entries.forEach((group) => group.forEach(([addressHash]) => daemonAddresses.push(addressHash)))\n\n      // We filter out all the HD addresses\n      const randomAddresses: string[] = daemonAddresses\n        .filter((daemonAddressHash: string) =>\n          this.ADDRESSES.filter(({ hash }: WalletAddress) => daemonAddressHash === hash).length === 0)\n\n      // We try to retrieve the random addresses private keys and import them\n      i = randomAddresses.length\n      while (--i >= 0) {\n        try {\n          await this.rpc.importPrivateKey(this.ADDRESSES[i].privateKey)\n          this.RANDOM_ADDRESSES.push({\n            hash: randomAddresses[i],\n            isCiphered: false,\n            isHD: false,\n            label: null,\n            privateKey: await this.rpc.getPrivateKey(randomAddresses[i])\n          })\n        }\n        catch (err) {\n          // We ignore this error for now.\n        }\n      }\n\n      // We try to import the HD addresses into the RPC deamon\n      i = this.ADDRESSES.length\n      while (--i >= 0) {\n        try { await this.rpc.importPrivateKey(this.ADDRESSES[i].privateKey) }\n        catch (err) {\n          // We ignore this error in case the private key is already registered by the RPC deamon.\n        }\n      }\n    }\n\n    this.STATE = WalletState.READY\n  }\n\n  /**\n   * Lock the wallet, that is cipher all its private keys.\n   */\n  public async lock(passphrase: string): Promise<void> {\n    if (!this.isHard && this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #lock() method can only be called on a ready wallet (#state = \"READY\").`)\n    }\n\n    if (this.isHard && this.DAEMON_STATE !== WalletDaemonState.STARTED) {\n      throw new Error(`ElectraJs.Wallet:\n        The #lock() method can only be called on a started wallet (#daemonState = \"STARTED\").`)\n    }\n\n    if (this.LOCK_STATE === WalletLockState.LOCKED) return\n\n    if (this.isHard) {\n      if (this.isNew) {\n        const [err1] = await to(this.rpc.encryptWallet(passphrase))\n        if (err1 !== null) { throw err1 }\n\n        // Dirty hack since we have no idea how long the deamon process will take to exit\n        while (this.DAEMON_STATE !== WalletDaemonState.STOPPED) {\n          // tslint:disable-next-line:no-magic-numbers\n          await wait(250)\n        }\n\n        // Encrypting the wallet has stopped the deamon, so we need to start it again\n        await this.startDaemon()\n\n        this.isNew = false\n        this.LOCK_STATE = WalletLockState.LOCKED\n\n        return\n      }\n\n      await this.rpc.lock()\n\n      this.LOCK_STATE = WalletLockState.LOCKED\n\n      return\n    }\n\n    try {\n      if (this.MASTER_NODE_ADDRESS !== undefined && !this.MASTER_NODE_ADDRESS.isCiphered) {\n        this.MASTER_NODE_ADDRESS.privateKey = Crypto.cipherPrivateKey(this.MASTER_NODE_ADDRESS.privateKey, passphrase)\n      }\n\n      this.ADDRESSES = this.ADDRESSES.map((address: WalletAddress) => {\n        if (!address.isCiphered) {\n          address.privateKey = Crypto.cipherPrivateKey(address.privateKey, passphrase)\n        }\n\n        return address\n      })\n\n      this.RANDOM_ADDRESSES = this.RANDOM_ADDRESSES.map((randomAddress: WalletAddress) => {\n        if (!randomAddress.isCiphered) {\n          randomAddress.privateKey = Crypto.cipherPrivateKey(randomAddress.privateKey, passphrase)\n        }\n\n        return randomAddress\n      })\n    }\n    catch (err) { throw err }\n\n    // Locking the wallet should delete any stored mnemonic\n    if (this.MNEMONIC !== undefined) delete this.MNEMONIC\n\n    this.LOCK_STATE = WalletLockState.LOCKED\n  }\n\n  /**\n   * Unlock the wallet, that is decipher all its private keys.\n   */\n  public async unlock(passphrase: string, forStakingOnly: boolean = true): Promise<void> {\n    if (!this.isHard && this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #unlock() method can only be called on a ready wallet (#state = \"READY\").`)\n    }\n\n    if (this.isHard && this.DAEMON_STATE !== WalletDaemonState.STARTED) {\n      throw new Error(`ElectraJs.Wallet:\n        The #unlock() method can only be called on a started wallet (#daemonState = \"STARTED\").`)\n    }\n\n    if (this.isHard) {\n      if (\n        !forStakingOnly && this.LOCK_STATE === WalletLockState.STAKING\n        || forStakingOnly && this.LOCK_STATE === WalletLockState.UNLOCKED\n      ) {\n        const [err1] = await to(this.lock(passphrase))\n        if (err1 !== null) throw err1\n      }\n\n      const [err2] = await to(this.rpc.unlock(passphrase, ONE_YEAR_IN_SECONDS, forStakingOnly))\n      if (err2 !== null) throw err2\n      this.LOCK_STATE = forStakingOnly ? WalletLockState.STAKING : WalletLockState.UNLOCKED\n\n      return\n    }\n\n    if (this.LOCK_STATE === WalletLockState.UNLOCKED) return\n\n    try {\n      if (this.MASTER_NODE_ADDRESS !== undefined && this.MASTER_NODE_ADDRESS.isCiphered) {\n        this.MASTER_NODE_ADDRESS.privateKey = Crypto.decipherPrivateKey(this.MASTER_NODE_ADDRESS.privateKey, passphrase)\n      }\n\n      this.ADDRESSES = this.ADDRESSES.map((address: WalletAddress) => {\n        if (address.isCiphered) {\n          address.privateKey = Crypto.decipherPrivateKey(address.privateKey, passphrase)\n        }\n\n        return address\n      })\n\n      this.RANDOM_ADDRESSES = this.RANDOM_ADDRESSES.map((randomAddress: WalletAddress) => {\n        if (randomAddress.isCiphered) {\n          randomAddress.privateKey = Crypto.decipherPrivateKey(randomAddress.privateKey, passphrase)\n        }\n\n        return randomAddress\n      })\n    }\n    catch (err) { throw err }\n\n    this.LOCK_STATE = WalletLockState.UNLOCKED\n  }\n\n  /**\n   * Import a wallet data containing ciphered private keys.\n   *\n   * @note\n   * The <data> must be a stringified JSON WEF following the EIP-0002 specifications.\n   * https://github.com/Electra-project/Electra-Improvement-Proposals/blob/master/EIP-0002.md\n   */\n  public async import(data: string, passphrase: string): Promise<void> {\n    if (this.STATE !== WalletState.EMPTY) {\n      throw new Error(`ElectraJs.Wallet:\n        The #import() method can only be called on an empty wallet (#state = \"EMPTY\").\n      `)\n    }\n\n    const [err, wefData] = tryCatch(() => JSON.parse(data) as WalletExchangeFormat)\n    if (err !== undefined) throw err\n\n    const [version, chainsCount, hdPrivateKeyX, randomPrivateKeysX] = wefData as WalletExchangeFormat\n\n    // tslint:disable-next-line:no-magic-numbers\n    if (version !== 2) {\n      throw new Error(`ElectraJs.Wallet: The WEF version should be equal to 2.`)\n    }\n\n    /*\n      ----------------------------------\n      STEP 1: MASTER NODE\n    */\n\n    try {\n      const privateKey: string = Crypto.decipherPrivateKey(hdPrivateKeyX, passphrase)\n      const hash: string = Electra.getAddressHashFromPrivateKey(privateKey)\n      this.MASTER_NODE_ADDRESS = {\n        hash,\n        isCiphered: false,\n        isHD: true,\n        label: null,\n        privateKey,\n      }\n    }\n    catch (err) { throw err }\n\n    /*\n      ----------------------------------\n      STEP 2: CHAINS\n    */\n\n    let chainIndex: number = -1\n    try {\n      while (++chainIndex < chainsCount) {\n        const address: Address = Electra.getDerivedChainFromMasterNodePrivateKey(\n          this.MASTER_NODE_ADDRESS.privateKey,\n          WALLET_INDEX,\n          chainIndex\n        )\n\n        this.ADDRESSES.push({\n          ...address,\n          label: null\n        })\n      }\n    }\n    catch (err) { throw err }\n\n    /*\n      ----------------------------------\n      STEP 3: RANDOM ADDRESSES\n    */\n\n    let randomAddressIndex: number = randomPrivateKeysX.length\n    try {\n      while (--randomAddressIndex >= 0) {\n        const privateKey: string = Crypto.decipherPrivateKey(randomPrivateKeysX[randomAddressIndex], passphrase)\n        const hash: string = Electra.getAddressHashFromPrivateKey(privateKey)\n        this.RANDOM_ADDRESSES.push({\n          hash,\n          isCiphered: false,\n          isHD: true,\n          label: null,\n          privateKey,\n        })\n      }\n    }\n    catch (err) { throw err }\n\n    /*\n      ----------------------------------\n      STEP 4: RPC SERVER\n    */\n\n    if (this.isHard) {\n      let i: number\n\n      // We try to import the HD and the random (non-HD) addresses into the RPC deamon\n      i = this.allAddresses.length\n      while (--i >= 0) {\n        try { await this.rpc.importPrivateKey(this.ADDRESSES[i].privateKey) }\n        catch (err) { /* We ignore this error in case the private key is already registered by the RPC deamon. */ }\n      }\n    }\n\n    this.STATE = WalletState.READY\n  }\n\n  /**\n   * Export wallet data with ciphered private keys, or unciphered if <unsafe> is set to TRUE.\n   *\n   * @note\n   * The returned string will be a stringified JSON WEF following the EIP-0002 specifications.\n   * https://github.com/Electra-project/Electra-Improvement-Proposals/blob/master/EIP-0002.md\n   */\n  public export(): string {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #export() method can only be called on a ready wallet (#state = \"READY\").`)\n    }\n\n    if (this.LOCK_STATE === WalletLockState.UNLOCKED) {\n      throw new Error(`ElectraJs.Wallet:\n        The wallet is currently unlocked. Exporting it would thus export the private keys in clear.\n        You need to #lock() it first.\n      `)\n    }\n\n    const wefData: WalletExchangeFormat = [\n      // tslint:disable-next-line:no-magic-numbers\n      2,\n      this.ADDRESSES.length,\n      (this.MASTER_NODE_ADDRESS as WalletAddress).privateKey,\n      this.RANDOM_ADDRESSES.map((address: WalletAddress) => address.privateKey)\n    ]\n\n    return JSON.stringify(wefData)\n  }\n\n  /**\n   * Import a ramdomly generated (legacy) WIF private key into the wallet.\n   * If the [passphrase] is not defined, the <privateKey> MUST be given deciphered.\n   * If the [passphrase] is defined, the <privateKey> MUST be given ciphered.\n   */\n  public importRandomAddress(privateKey: string, passphrase?: string): void {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet:\n        The #importRandomAddress() method can only be called on a ready wallet (#state = \"READY\").\n      `)\n    }\n\n    const address: Partial<WalletAddress> = {\n      isHD: false,\n      label: null,\n      privateKey\n    }\n\n    // Decipher the private key is necessary\n    if (passphrase !== undefined) {\n      try {\n        address.privateKey = Crypto.decipherPrivateKey(privateKey, passphrase)\n      }\n      catch (err) {\n        throw err\n      }\n    }\n\n    address.isCiphered = false\n\n    // Get the address hash\n    try {\n      address.hash = Electra.getAddressHashFromPrivateKey(address.privateKey as string)\n    }\n    catch (err) {\n      throw err\n    }\n\n    this.RANDOM_ADDRESSES.push(address as WalletAddress)\n  }\n\n  /**\n   * Reset the current wallet properties and switch the #state to \"EMPTY\".\n   */\n  public reset(): void {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: You can't #reset() a wallet that is not ready (#state = \"READY\").`)\n    }\n\n    delete this.MASTER_NODE_ADDRESS\n    delete this.MNEMONIC\n\n    this.ADDRESSES = []\n    this.RANDOM_ADDRESSES = []\n    this.STATE = WalletState.EMPTY\n  }\n\n  /**\n   * Get the global wallet balance, or the <address> balance if specified.\n   */\n  public async getBalance(addressHash?: string): Promise<number> {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: You can only #getBalance() from a ready wallet (#state = \"READY\").`)\n    }\n\n    if (this.isHard) {\n      const [err, balance] = await to(this.rpc.getBalance())\n      if (err !== null) throw err\n\n      return balance as number\n    }\n\n    const addresses: WalletAddress[] = this.allAddresses\n\n    if (addressHash !== undefined) {\n      if (addresses.filter((address: WalletAddress) => address.hash === addressHash).length === 0) {\n        throw new Error(`ElectraJs.Wallet: You can't #getBalance() with an address not part of the current wallet.`)\n      }\n\n      // tslint:disable-next-line:no-shadowed-variable\n      const [err, balance] = await to(webServices.getBalanceFor(addressHash))\n      if (err !== null) throw err\n\n      return balance as number\n    }\n\n    let index: number = addresses.length\n    let balanceTotal: number = 0\n    while (--index >= 0) {\n      const [err, balance] = await to(webServices.getBalanceFor(this.allAddresses[index].hash))\n      if (err !== null || balance === undefined) throw err\n      balanceTotal += balance\n    }\n\n    return balanceTotal\n  }\n\n  /**\n   * Get the wallet info.\n   */\n  public async getInfo(): Promise<WalletInfo> {\n    if (this.STATE !== WalletState.READY) {\n      return Promise.reject(new Error(`ElectraJs.Wallet: #getInfo() is only available when the #state is \"READY\".`))\n    }\n\n    try {\n      const [localBlockchainHeight, peersInfo, stakingInfo]: [\n        RpcMethodResult<'getblockcount'>,\n        RpcMethodResult<'getpeerinfo'>,\n        RpcMethodResult<'getstakinginfo'>\n      ] = await Promise.all<\n        RpcMethodResult<'getblockcount'>,\n        RpcMethodResult<'getpeerinfo'>,\n        RpcMethodResult<'getstakinginfo'>\n      >([\n        this.rpc.getLocalBlockHeight(),\n        this.rpc.getPeersInfo(),\n        this.rpc.getStakingInfo(),\n      ])\n\n      const networkBlockchainHeight: number = peersInfo.length !== 0\n        ? getMaxItemFromList(peersInfo, 'startingheight').startingheight\n        : 0\n\n      return {\n        connectionsCount: peersInfo.length,\n        isHD: Boolean(this.MASTER_NODE_ADDRESS),\n        isStaking: stakingInfo.staking,\n        isSynchonized: localBlockchainHeight === networkBlockchainHeight,\n        localBlockchainHeight,\n        localStakingWeight: stakingInfo.weight,\n        networkBlockchainHeight,\n        networkStakingWeight: stakingInfo.netstakeweight,\n        nextStakingRewardIn: stakingInfo.expectedtime,\n      }\n    }\n    catch (err) {\n      throw err\n    }\n  }\n\n  /**\n   * Create and broadcast a new transaction of <amount> <toAddressHash> from the first unspent ones.\n   */\n  public async send(amount: number, toAddressHash: string, fromAddressHash?: string): Promise<void> {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: You can only #send() from a ready wallet (#state = \"READY\").`)\n    }\n\n    if (this.LOCK_STATE !== WalletLockState.UNLOCKED) {\n      throw new Error(`ElectraJs.Wallet:\n        You can only #send() from an unlocked wallet (#lockState = 'UNLOCKED').\n        Please #unlock() it first with <forStakingOnly> to TRUE.`)\n    }\n\n    if (amount <= 0) {\n      throw new Error(`ElectraJs.Wallet: You can only send #send() a strictly positive <amount>.`)\n    }\n\n    if (fromAddressHash !== undefined && !R.contains({ hash: fromAddressHash }, this.allAddresses)) {\n      throw new Error(`ElectraJs.Wallet: You can't #send() from an address that is not part of the current wallet.`)\n    }\n\n    if (amount > (await this.getBalance() - ECA_TRANSACTION_FEE)) {\n      throw new Error(`ElectraJs.Wallet: You can't #send() from an address that is not part of the current wallet.`)\n    }\n\n    if (this.isHard) {\n      const [err2] = await to(this.rpc.sendBasicTransaction(toAddressHash, amount))\n      if (err2 !== null) throw err2\n\n      return\n    }\n\n    /*\n      STEP 1: UNSPENT TRANSACTIONS\n    */\n    /*const [err1, unspentTransactions] = await to(this.getUnspentTransactions(true))\n    if (err1 !== null || unspentTransactions === undefined) throw err1\n\n    let availableAmount: number = 0\n    const requiredUnspentTransactions: string[] = []\n    // tslint:disable-next-line:prefer-const\n    for (let unspentTransaction of unspentTransactions) {\n      availableAmount += unspentTransaction.amount\n      requiredUnspentTransactions.push(unspentTransaction.hash)\n\n      if (availableAmount >= amount) break\n    }*/\n\n    /*\n      STEP 2: BROADCAST\n    */\n\n    /*if (this.isHard) {\n      // TODO Replace this method with a detailed unspent transactions signed one.\n      const [err2] = await to(this.rpc.sendBasicTransaction(toAddressHash, amount))\n      if (err2 !== null) throw err2\n    }*/\n  }\n\n  /**\n   * List the last wallet transactions.\n   */\n  public async getTransactions(count: number = 10, fromIndex: number = 0): Promise<WalletTransaction[]> {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: #getTransactions() is only available when the #state is \"READY\".`)\n    }\n\n    if (this.isHard) {\n      const [err1, transactionsRaw] = await to(this.rpc.listTransactions('*', count, fromIndex))\n      if (err1 !== null || transactionsRaw === undefined) throw err1\n\n      let index: number = 0\n      const transactions: WalletTransaction[] = []\n      while (++index < transactions.length) {\n        const transactionRaw: RpcMethodResult<'listtransactions'>[0] = transactionsRaw[index]\n        const transaction: Partial<WalletTransaction> = {\n          amount: transactionRaw.amount,\n          confimationsCount: transactionRaw.confirmations,\n          date: transactionRaw.time,\n          hash: transactionRaw.txid,\n        }\n\n        if (transactionRaw.category === 'generate') {\n          transaction.to = [transactionRaw.address]\n          transaction.type = WalletTransactionType.GENERATED\n        } else {\n          const [err2, transactionInfo] = await to(this.rpc.getTransaction(transaction.hash as string))\n          if (err2 !== null || transactionInfo === undefined) throw err2\n\n          if (transactionRaw.category === 'send') {\n            transaction.from = [transactionRaw.address]\n            transaction.to = transactionInfo.details\n              .filter(({ category }: RpcMethodResult<'gettransaction'>['details'][0]) => category === 'receive')\n              .map(({ address }: RpcMethodResult<'gettransaction'>['details'][0]) => address)\n            transaction.type = WalletTransactionType.SENT\n          }\n\n          if (transactionRaw.category === 'receive') {\n            transaction.from = transactionInfo.details\n              .filter(({ category }: RpcMethodResult<'gettransaction'>['details'][0]) => category === 'send')\n              .map(({ address }: RpcMethodResult<'gettransaction'>['details'][0]) => address)\n            transaction.to = [transactionRaw.address]\n            transaction.type = WalletTransactionType.RECEIVED\n          }\n        }\n\n        transactions.push(transaction as WalletTransaction)\n      }\n\n      return transactions\n    }\n\n    return []\n  }\n\n  /**\n   * Does the daemon user directory exist ?\n   */\n  private isDaemonUserDirectory(): boolean {\n    // tslint:disable-next-line:no-require-imports\n    return (require('fs').existsSync(DAEMON_USER_DIR_PATH) as boolean)\n  }\n\n  /**\n   * Try to guess the daemon lock state by checking if the 'lock' method is available.\n   */\n  private async getDaemonLockState(): Promise<WalletLockState> {\n    if (!this.isHard) {\n      throw new Error(`ElectraJs.Wallet: #getLockState() is only available on a hard wallet.`)\n    }\n\n    if (this.DAEMON_STATE !== WalletDaemonState.STARTING) {\n      throw new Error(`ElectraJs.Wallet:\n        #getLockState() is only available when the hard wallet is starting (#DAEMON_STATE = 'STARTING').`)\n    }\n\n    const [err] = await to(this.rpc.lock())\n    if (err !== null && err.message === 'DAEMON_RPC_LOCK_ATTEMPT_ON_UNENCRYPTED_WALLET') {\n      return WalletLockState.UNLOCKED\n    }\n\n    return WalletLockState.LOCKED\n  }\n\n  /** List the wallet unspent transactions, ordered by descending amount. */\n  /*private async getUnspentTransactions(includeUnconfirmed: boolean = false): Promise<WalletTransaction[]> {\n    if (this.STATE !== WalletState.READY) {\n      throw new Error(`ElectraJs.Wallet: The #transactions are only available when the #state is \"READY\".`)\n    }\n\n    if (this.isHard) {\n      const [err, res] = await to(this.rpc.listUnspent(includeUnconfirmed ? 0 : 1))\n      if (err !== null || res === undefined) throw err\n\n      return R.sort(\n        R.descend(R.prop('amount')),\n        res.map((unspentTransaction: RpcMethodResult<'listunspent'>[0]) => ({\n          amount: unspentTransaction.amount,\n          confimationsCount: unspentTransaction.confirmations,\n          hash: unspentTransaction.txid,\n          toAddressHash: unspentTransaction.address\n        }))\n      )\n    }\n\n    return []\n  }*/\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/wallet/index.ts","// tslint:disable\n\nimport to from 'await-to-js'\n\nimport { DAEMON_CONFIG, DAEMON_URI } from '../constants'\nimport Rpc from '../libs/rpc'\n\nasync function exec(command: string): Promise<string> {\n  return new Promise((resolve: (stdout: string) => void, reject) => {\n    require('child_process').exec(\n      command,\n      (err: Error, stdout: string, stderr: string): void => {\n        if (err !== null || stderr.length !== 0) {\n          reject(err || new Error(stderr))\n\n          return\n        }\n\n        resolve(stdout)\n      }\n    )\n  })\n}\n\nfunction toArrayOfLines(output: string): string[] {\n  return output\n    .split(require('os').EOL)\n    .map(line => line.trim())\n    .filter(line => line.length !== 0)\n}\n\nexport default async function(): Promise<void> {\n  const rpc = new Rpc(DAEMON_URI, {\n    password: DAEMON_CONFIG.rpcpassword,\n    username: DAEMON_CONFIG.rpcuser,\n  })\n\n  if (['darwin', 'linux'].includes(process.platform)) {\n   const [err1, stdout1] = await to(exec(`lsof | grep :${DAEMON_CONFIG.rpcport}`))\n   if (err1 === null && stdout1 !== undefined) {\n     const results1 = toArrayOfLines(stdout1)\n      // If we find at least one used RPC port, we can try to send a \"stop\" command\n      if (results1.length !== 0) {\n        const daemonPid = Number(results1[0].split(/\\s+/)[1])\n\n        try { await rpc.stop() }\n        catch(err) { /* We can ignore any error here. */ }\n\n        // tslint:disable-next-line:no-require-imports\n        require('tree-kill')(daemonPid, 'SIGKILL')\n      }\n    }\n\n    const [err2, stdout2] = await to(exec(`lsof | grep :${DAEMON_CONFIG.rpcport}`))\n    if (err2 === null && stdout2 !== undefined) {\n      const results2 = toArrayOfLines(stdout2)\n\n      if (results2.length === 0) return\n    } else {\n      return\n    }\n\n    await to(exec(`ps -ef | grep -i ^electra* | grep -v grep | awk '{print $2}' | xargs -r kill -9`))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/closeElectraDaemons.ts","import { ERRORS } from './constants'\nimport { ElectraJsErrorReference } from './types'\n\n/**\n * Custom ElectraJs error class.\n */\nexport default class ElectraJsError<T extends keyof ElectraJsErrorReference> extends Error {\n  /** Error code. */\n  public code: ElectraJsErrorReference[T]\n\n  public constructor(key: T) {\n    super(key)\n\n    this.code = ERRORS[key]\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/error/index.ts","import { ElectraJsErrorReference } from './types'\n\nexport const ERRORS: ElectraJsErrorReference = {\n  DAEMON_RPC_LOCK_ATTEMPT_ON_UNENCRYPTED_WALLET: 302,\n  DAEMON_RPC_METHOD_NOT_FOUND: 301,\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/error/constants.ts","import { RpcErrorTranslation } from './types'\n\nexport const RPC_ERRORS_TRANSLATION: RpcErrorTranslation = {\n  // \"'Error: running with an unencrypted wallet, but walletlock was called.'\"\n  '-15': 'DAEMON_RPC_LOCK_ATTEMPT_ON_UNENCRYPTED_WALLET',\n  // \"Method not found\"\n  '-32601': 'DAEMON_RPC_METHOD_NOT_FOUND',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/rpc/constants.ts","module.exports = require(\"tree-kill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tree-kill\"\n// module id = 16\n// module chunks = 0","import * as R from 'ramda'\n\nexport default function<T extends {}>(list: T[], propertyName: keyof T): T {\n  return R.last(R.sortBy(R.prop(propertyName))(list)) as T\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/getMaxItemFromList.ts","// tslint:disable\n\nexport default function() {\n  const electraUserDirectoryPath = `${require('os').homedir()}/.Electra`\n  const electraConfigFilePath = `${electraUserDirectoryPath}/Electra.conf`\n  const fs = require('fs')\n\n  if (fs.existsSync(electraConfigFilePath)) return\n\n  if (!fs.existsSync(electraConfigFilePath)) {\n    fs.mkdirSync(electraUserDirectoryPath)\n  }\n\n  fs.writeFileSync(electraConfigFilePath, `\n    listen=1\n    daemon=1\n    server=1\n    rpcuser=user\n    rpcpassword=pass\n    rpcallowip=127.0.0.1\n    rpcport=5788\n    walletnotify=curl -X POST http://localhost:3005/transaction\n    addnode=175.156.111.14:5817\n    addnode=174.89.254.197:5817\n    addnode=76.176.172.191:5817\n    addnode=162.227.19.41:5817\n    addnode=88.212.41.190:5817\n    addnode=89.64.23.106:5817\n    addnode=216.36.9.43:5817\n    addnode=79.68.133.50:5817\n    addnode=91.64.5.29:5817\n    addnode=78.46.11.116:5817\n    addnode=54.254.206.188:5817\n    addnode=62.195.3.233:5817\n    addnode=92.244.140.34:5817\n    addnode=104.196.150.38:5817\n    addnode=175.143.236.83:5817\n    addnode=184.18.171.147:5817\n    addnode=50.117.145.211:5817\n    addnode=88.113.185.228:5817\n    addnode=75.17.247.94:5817\n    addnode=90.83.233.236:5817\n    addnode=47.36.123.215:5817\n    addnode=24.234.131.6:5817\n    addnode=151.225.177.2:5817\n    addnode=176.9.28.175:5817\n    addnode=99.246.246.176:5817\n    addnode=89.153.148.115:5817\n    addnode=47.184.165.5:5817\n    addnode=77.244.2.4:5817\n    addnode=115.64.32.141:5817\n    addnode=92.98.87.47:5817\n    addnode=138.130.233.149:5817\n    addnode=74.215.142.69:5817\n    addnode=74.210.155.65:5817\n    addnode=188.63.226.42:5817\n    addnode=18.196.53.82:5817\n    addnode=153.177.70.226:5817\n    addnode=151.230.177.29:5817\n    addnode=86.95.52.11:5817\n    addnode=155.186.129.162:5817\n    addnode=85.148.161.65:5817\n    addnode=207.81.71.16:5817\n    addnode=71.81.57.214:5817\n    addnode=172.113.240.185:5817\n    addnode=94.112.252.211:5817\n    addnode=209.205.120.214:5817\n    addnode=24.164.144.57:5817\n    addnode=68.129.98.197:5817\n    addnode=37.59.75.197:5817\n    addnode=71.7.234.19:5817\n    addnode=24.71.249.172:5817\n    addnode=188.158.86.177:5817\n    addnode=24.209.226.87:5817\n    addnode=201.221.25.146:5817\n    addnode=86.89.201.242:5817\n    addnode=66.130.219.21:5817\n    addnode=72.89.39.234:5817\n    addnode=104.172.14.100:5817\n    addnode=69.71.3.226:5817\n    addnode=118.243.79.238:5817\n    addnode=76.178.141.194:5817\n    addnode=66.91.2.250:5817\n    addnode=2.236.186.175:5817\n    addnode=115.75.5.161:5817\n    addnode=219.73.96.212:5817\n    addnode=68.197.64.2:5817\n    addnode=184.254.90.175:5817\n    addnode=99.225.116.84:5817\n    addnode=99.249.0.228:5817\n    addnode=81.207.37.77:5817\n    addnode=146.255.183.207:5817\n    addnode=24.216.97.215:5817\n    addnode=77.56.204.71:5817\n    addnode=87.88.121.198:5817\n    addnode=207.38.255.59:5817\n    addnode=80.13.33.145:5817\n    addnode=23.83.37.240:5817\n    addnode=94.69.154.9:5817\n    addnode=199.204.33.5:5817\n    addnode=185.159.157.11:5817\n    addnode=96.249.253.77:5817\n    addnode=108.252.26.155:5817\n    addnode=74.196.29.206:5817\n    addnode=202.180.117.214:5817\n    addnode=71.85.54.160:5817\n    addnode=84.86.115.125:5817\n    addnode=217.101.13.195:5817\n    addnode=218.42.211.93:5817\n    addnode=184.91.69.255:5817\n    addnode=87.236.212.145:5817\n    addnode=24.6.183.21:5817\n    addnode=62.194.72.84:5817\n    addnode=188.100.48.102:5817\n    addnode=206.53.87.40:5817\n    addnode=84.86.214.197:5817\n    addnode=120.188.87.101:5817\n    addnode=179.52.57.43:5817\n    addnode=173.79.94.125:5817\n    addnode=218.191.110.150:5817\n    addnode=71.140.147.6:5817\n    addnode=108.51.34.254:5817\n    addnode=188.178.127.106:5817\n    addnode=198.52.94.127:5817\n    addnode=74.220.173.232:5817\n    addnode=61.92.178.51:5817\n    addnode=85.18.252.192:5817\n    addnode=94.212.98.11:5817\n    addnode=106.68.252.146:5817\n    addnode=24.17.198.123:5817\n    addnode=218.229.81.81:5817\n    addnode=83.233.110.142:5817\n    addnode=212.120.229.20:5817\n    addnode=31.18.250.22:5817\n    addnode=176.212.144.217:5817\n    addnode=77.38.26.225:5817\n    addnode=113.169.125.120:5817\n    addnode=79.40.246.173:5817\n    addnode=92.167.37.16:5817\n    addnode=67.7.104.144:5817\n    addnode=93.10.24.200:5817\n    addnode=178.233.148.151:5817\n    addnode=73.232.121.33:5817\n    addnode=178.249.129.121:5817\n    addnode=85.109.117.99:5817\n  `)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/injectElectraConfig.ts","import { Server } from 'net'\n\nexport default async function(port: number): Promise<boolean> {\n  return new Promise((resolve: (res: boolean) => void): void => {\n    // tslint:disable-next-line:no-require-imports\n    const server: Server = require('net').createServer()\n      .once('error', (err: Error) => resolve(false))\n      .once('listening', () => server\n        .once('close', () => resolve(true))\n        .close()\n      )\n      .listen(port)\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/isPortAvailable.ts","module.exports = require(\"net\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"net\"\n// module id = 20\n// module chunks = 0","/**\n * Helper to one-line try / catch statements\n */\nexport default function <T>(callback: () => T): [undefined, T] | [Error, undefined] {\n  try {\n    const res: T = callback()\n\n    return [undefined, res]\n  }\n  catch (err) {\n    return [err as Error, undefined]\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/tryCatch.ts","/**\n * Wait for <forInMs> milliseconds.\n */\nexport default async function(forInMs: number): Promise<void> {\n  return new Promise<void>((resolve: () => void): NodeJS.Timer => setTimeout(resolve, forInMs))\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/wait.ts","// tslint:disable:no-unnecessary-class\n\nimport * as bip38 from 'bip38'\nimport * as wif from 'wif'\n\nimport { ECA_NETWORK } from '../../constants'\n\nimport { Bip38DecryptResult } from './types'\n\n/**\n * Cryptography helpers.\n */\nexport default class Crypto {\n  /**\n   * Cipher a WIF private key into a BIP38 cipher.\n   *\n   * @see https://github.com/bitcoinjs/bip38#api\n   */\n  public static cipherPrivateKey(\n    privateKey: string,\n    passphrase: string,\n    progressCallback?: (percent: number) => void\n  ): string {\n    try {\n      const decodedPrivateKey: wif.PrivateKey = wif.decode(privateKey, ECA_NETWORK.wif)\n      const privateKeyCipher: string = bip38.encrypt(\n        decodedPrivateKey.privateKey,\n        decodedPrivateKey.compressed,\n        passphrase,\n        progressCallback !== undefined\n          ? (status: bip38.ProgressStatus): void => progressCallback(status.percent)\n          : undefined\n      )\n\n      return privateKeyCipher\n    }\n    catch (err) {\n      throw err\n    }\n  }\n\n  /**\n   * Decipher a BIP38 ciphered private key into a WIF private key.\n   *\n   * @see https://github.com/bitcoinjs/bip38#api\n   */\n  public static decipherPrivateKey(privateKeyCipher: string, passphrase: string): string {\n    try {\n      const encodedPrivateKey: Bip38DecryptResult = bip38.decrypt(privateKeyCipher, passphrase)\n      const privateKey: string = wif.encode(ECA_NETWORK.wif, encodedPrivateKey.privateKey, encodedPrivateKey.compressed)\n\n      return privateKey\n    }\n    catch (err) {\n      throw err\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/crypto/index.ts","module.exports = require(\"bip38\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bip38\"\n// module id = 24\n// module chunks = 0","module.exports = require(\"wif\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"wif\"\n// module id = 25\n// module chunks = 0","// tslint:disable:no-unnecessary-class\n\nimport * as bip39 from 'bip39'\nimport * as bitcoinJs from 'bitcoinjs-lib'\n\nimport { ECA_NETWORK } from '../../constants'\n\nimport { Address } from '../../types'\n\nconst CHAIN_CODE_BUFFER_SIZE: number = 32\nconst ENTROPY_STRENGTH: number = 128\n\n/**\n * Electra blockchain functions.\n */\nexport default class Electra {\n  /**\n   * Resolve the address hash from its WIF private key.\n   */\n  public static getAddressHashFromPrivateKey(privateKey: string): string {\n    return bitcoinJs.ECPair\n      .fromWIF(privateKey, ECA_NETWORK)\n      .getAddress()\n  }\n\n  /**\n   * Calculate the derived key n (0-indexed) from a Highly Deterministic Wallet Master Node private key.\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#master-key-generation\n   */\n  public static getDerivedChainFromMasterNodePrivateKey(\n    privateKey: string,\n    walletIndex: number,\n    chainIndex: number\n  ): Address {\n    const masterNode: bitcoinJs.HDNode = this.getMasterNodeFromPrivateKey(privateKey)\n    const derivedNode: bitcoinJs.HDNode = masterNode.deriveHardened(walletIndex).derive(chainIndex)\n\n    return {\n      hash: derivedNode.getAddress(),\n      isCiphered: false,\n      isHD: true,\n      privateKey: derivedNode.keyPair.toWIF()\n    }\n  }\n\n  /**\n   * Resolve the Highly Deterministic Wallet Master Node address hash and WIF private key\n   * from its associated mnemonic, extended by the mnemonic extension if given.\n   *\n   * @see https://en.bitcoin.it/wiki/Mnemonic_phrase\n   */\n  public static getMasterNodeAddressFromMnemonic(mnemonic: string, mnemonicExtension?: string): Address {\n    const masterNode: bitcoinJs.HDNode = this.getMasterNodeFromMnemonic(mnemonic, mnemonicExtension)\n    const keyPair: bitcoinJs.ECPair = masterNode.keyPair\n\n    return {\n      hash: keyPair.getAddress(),\n      isCiphered: false,\n      isHD: true,\n      privateKey: keyPair.toWIF()\n    }\n  }\n\n  /**\n   * Generate a crypto-random address.\n   *\n   * @note This address can't be associated with a mnemonic and requires its private key to be recovered.\n   */\n  public static getRandomAddress(): Address {\n    const keyPair: bitcoinJs.ECPair = bitcoinJs.ECPair.makeRandom({ network: ECA_NETWORK })\n\n    return {\n      hash: keyPair.getAddress(),\n      isCiphered: false,\n      isHD: false,\n      privateKey: keyPair.toWIF()\n    }\n  }\n\n  /**\n   * Generate a crypto-random mnemonic, using a 128-bits entropy.\n   *\n   * @note A 128-bits entropy generates a 12 words mnemonic.\n   * @see https://github.com/bitcoinjs/bip39\n   */\n  public static getRandomMnemonic(): string {\n    return bip39.generateMnemonic(ENTROPY_STRENGTH)\n  }\n\n  /**\n   * Generate a crypto-random mnemonic, using a 128-bits entropy.\n   *\n   * @note A 128-bits entropy generates a 12 words mnemonic.\n   * @see https://github.com/bitcoinjs/bip39\n   */\n  public static validateMnemonic(mnemonic: string): boolean {\n    return bip39.validateMnemonic(mnemonic)\n  }\n\n  /**\n   * Return an instance of Highly Deterministic Wallet Master Node from its mnemonic,\n   * extended by the mnemonic extension if given.\n   */\n  private static getMasterNodeFromMnemonic(mnemonic: string, mnemonicExtension?: string): bitcoinJs.HDNode {\n    const seed: Buffer = this.getSeedFromMnemonic(mnemonic, mnemonicExtension)\n\n    return bitcoinJs.HDNode.fromSeedBuffer(seed, ECA_NETWORK)\n  }\n\n  /**\n   * Return an instance of Highly Deterministic Wallet Master Node from its WIF private key.\n   */\n  private static getMasterNodeFromPrivateKey(privateKey: string): bitcoinJs.HDNode {\n    const masterNodeKeyPair: bitcoinJs.ECPair = bitcoinJs.ECPair.fromWIF(privateKey, ECA_NETWORK)\n\n    // TODO Check the \"chainCode\" buffer\n    return new bitcoinJs.HDNode(masterNodeKeyPair, new Buffer(CHAIN_CODE_BUFFER_SIZE))\n  }\n\n  /**\n   * Convert the mnemonic into a seed buffer, extended by the mnemonic extension if given.\n   *\n   * @see https://en.bitcoin.it/wiki/Mnemonic_phrase\n   */\n  private static getSeedFromMnemonic(mnemonic: string, mnemonicExtension?: string): Buffer {\n    return bip39.mnemonicToSeed(mnemonic, mnemonicExtension)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/electra/index.ts","module.exports = require(\"bip39\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bip39\"\n// module id = 27\n// module chunks = 0","module.exports = require(\"bitcoinjs-lib\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bitcoinjs-lib\"\n// module id = 28\n// module chunks = 0","import to from 'await-to-js'\nimport Axios from 'axios'\n\nconst URI: string = 'https://api.electraexplorer.com/ext/getaddress/'\n\ninterface ElectraExplorerGetAddressTransaction {\n  addresses: string\n  type: 'vin' | 'vout'\n}\n\ninterface ElectraExplorerGetAddress {\n  address: string\n  balance: number\n  last_txs: ElectraExplorerGetAddressTransaction[]\n  received: number\n  sent: number\n}\n\n/**\n * Get the current price of ECA via CoinMarketCap.\n */\nexport default async function(address: string): Promise<number> {\n  const [ err, res ] = await to(Axios.get<ElectraExplorerGetAddress>(URI + address))\n  if (err) throw new Error(`webServices#getBalanceFor(): ${err.message}`)\n\n  if (res === undefined || typeof res.data !== 'object' || typeof res.data.balance !== 'number') {\n    if (res !== undefined && typeof res.data === 'object') return 0\n\n    throw new Error(`webServices#getBalanceFor(): We did't get the expected response from ElectraExplorer.`)\n  }\n\n  return Number(res.data.balance)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/web-services/getBalanceFor.ts","import to from 'await-to-js'\nimport Axios from 'axios'\n\nimport enumStringArray from '../helpers/enumStringArray'\n\n// https://coinmarketcap.com/api/\n// tslint:disable-next-line:typedef\nexport const CURRENCIES = enumStringArray([\n  'AUD', 'BRL', 'BTC', 'CAD', 'CHF', 'CLP', 'CNY', 'CZK', 'DKK', 'EUR',\n  'GBP', 'HKD', 'HUF', 'IDR', 'ILS', 'INR', 'JPY', 'KRW', 'MXN', 'MYR',\n  'NOK', 'NZD', 'PHP', 'PKR', 'PLN', 'RUB', 'SEK', 'SGD', 'THB', 'TRY',\n  'TWD', 'USD', 'ZAR'\n])\n\nconst URI: string = 'https://api.coinmarketcap.com/v1/ticker/electra/'\n\nexport type CoinMarketCapCurrency = keyof typeof CURRENCIES\n\ninterface CoinMarketCapCoinInfo {\n  id: 'electra'\n  name: 'Electra'\n  symbol: 'ECA'\n  rank: string | null\n  price_usd: string | null\n  price_btc: string | null\n  '24h_volume_usd': string | null\n  market_cap_usd: string | null\n  available_supply: string | null\n  total_supply: string | null\n  max_supply: string | null\n  percent_change_1h: string | null\n  percent_change_24h: string | null\n  percent_change_7d: string | null\n  last_updated: string | null\n}\n\n/**\n * Get the current price of ECA via CoinMarketCap.\n */\nexport default async function(currency: CoinMarketCapCurrency = 'USD'): Promise<number> {\n  const [ err, res ] = await to(Axios.get<CoinMarketCapCoinInfo[]>(URI, { params: { convert: currency } }))\n  if (err) throw new Error(`api#webServices(): ${err.message}`)\n\n  if (res === undefined || !Array.isArray(res.data) || res.data.length === 0) {\n    throw new Error(`api#webServices(): We did't get the expected response from CoinMarketCap.`)\n  }\n\n  const priceKey: keyof CoinMarketCapCoinInfo = `price_${currency.toLowerCase()}` as keyof CoinMarketCapCoinInfo\n\n  return Number(res.data[0][priceKey])\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/web-services/getCurrentPriceIn.ts","// tslint:disable\n\n/**\n * Helper to create a K:V from an array of strings.\n */\nexport default function <T extends string>(strings: T[]): {[K in T]: K} {\n  return strings.reduce((res: {}, key: string) =>\n    (res: any, key: any) => {\n      res[key] = key\n\n      return res\n    },\n    Object.create(null)\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/enumStringArray.ts","import { Address, OrNull } from '../types'\n\nexport type PlatformBinary = {\n  [P in NodeJS.Platform]?: string\n}\n\nexport interface WalletAddress extends Address {\n  label: OrNull<string>\n}\n\nexport enum WalletDaemonState {\n  STARTED = 'STARTED',\n  STARTING = 'STARTING',\n  STOPPED = 'STOPPED',\n  STOPPING = 'STOPPING',\n}\n\n// https://github.com/Electra-project/Electra-Improvement-Proposals/blob/master/EIP-0002.md\nexport type WalletExchangeFormat = [\n  // tslint:disable-next-line:no-magic-numbers\n  2,\n  number,\n  string,\n  string[]\n]\n\nexport interface WalletInfo {\n  connectionsCount?: number\n  isHD: boolean\n  isStaking: boolean\n  isSynchonized?: boolean\n  localBlockchainHeight?: number\n  localStakingWeight?: number\n  networkBlockchainHeight: number\n  networkStakingWeight: number\n  nextStakingRewardIn: number // in seconds\n}\n\nexport enum WalletLockState {\n  LOCKED = 'LOCKED',\n  STAKING = 'STAKING',\n  UNLOCKED = 'UNLOCKED',\n}\n\nexport enum WalletState {\n  EMPTY = 'EMPTY',\n  READY = 'READY',\n}\n\nexport interface WalletTransaction {\n  amount: number\n  confimationsCount: number\n  date: number // Unix timestamp in seconds\n  from?: string[] // Addresses hash\n  hash: string\n  to: string[] // Addresses hash\n  type: WalletTransactionType\n}\n\nexport enum WalletTransactionType {\n  GENERATED = 'GENERATED',\n  RECEIVED = 'RECEIVED',\n  SENT = 'SENT',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/wallet/types.ts"],"sourceRoot":""}